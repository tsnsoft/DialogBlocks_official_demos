/////////////////////////////////////////////////////////////////////////////
// Name:        topdialog.cpp
// Purpose:     
// Author:      Anthemion Software Ltd
// Modified by: 
// Created:     15/06/2006 10:26:44
// RCS-ID:      
// Copyright:   (c) Anthemion Software Ltd
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "basiccontrols.h"
#include "complexdialog.h"
#include "advancedcontrols.h"
#include "scrollingdialog.h"
#include "wizarddialog.h"
#include "settingsdialog.h"
#include "splitterdialog.h"
////@end includes

#include "topdialog.h"

////@begin XPM images
#include "wxwin32x32.xpm"
////@end XPM images

/*!
 * TopDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( TopDialog, wxDialog )

/*!
 * TopDialog event table definition
 */

BEGIN_EVENT_TABLE( TopDialog, wxDialog )

////@begin TopDialog event table entries
    EVT_BUTTON( ID_TOPDIALOG_BUTTON, TopDialog::OnButton4Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON1, TopDialog::OnButton5Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON2, TopDialog::OnButton6Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON3, TopDialog::OnButton7Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON4, TopDialog::OnButton8Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON5, TopDialog::OnButton9Click )
    EVT_BUTTON( ID_TOPDIALOG_BUTTON6, TopDialog::OnButton10Click )
#if defined(__WXMSW__) || defined(__WXGTK__)
    EVT_BUTTON( wxID_CANCEL, TopDialog::OnCancelClick )
#endif

////@end TopDialog event table entries

END_EVENT_TABLE()

/*!
 * TopDialog constructors
 */

TopDialog::TopDialog( )
{
}

TopDialog::TopDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}

/*!
 * TopDialog creator
 */

bool TopDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin TopDialog member initialisation
////@end TopDialog member initialisation

////@begin TopDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    SetIcon(GetIconResource(wxT("wxwin32x32.xpm")));
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end TopDialog creation
    return true;
}

/*!
 * Control creation for TopDialog
 */

void TopDialog::CreateControls()
{    
////@begin TopDialog content construction
    TopDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxHtmlWindow* itemHtmlWindow3 = new wxHtmlWindow( itemDialog1, ID_TOPDIALOG_HTMLWINDOW, wxDefaultPosition, wxSize(200, 130), wxHW_SCROLLBAR_AUTO|wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    itemHtmlWindow3->SetPage(_("<b>Welcome to the DialogBlocks \"Elements\" sample</b><p>\n\nClick on  button to show a dialog. The code to show the dialogs has been generated by DialogBlocks, using actions associated with the button click event handler.\n\n</font>"));
    itemBoxSizer2->Add(itemHtmlWindow3, 1, wxGROW|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer4 = new wxFlexGridSizer(2, 4, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer4, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxButton* itemButton5 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON, _("Basic Controls"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton6 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON1, _("Complex Dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton7 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON2, _("Advanced Controls"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton8 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON3, _("Scrolling Dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton9 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON4, _("Wizard Dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON5, _("Settings Dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton10, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton11 = new wxButton( itemDialog1, ID_TOPDIALOG_BUTTON6, _("Splitter Dialog"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemButton11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer2->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

#if defined(__WXMSW__) || defined(__WXGTK__)
    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxButton* itemButton14 = new wxButton( itemDialog1, wxID_CANCEL, _("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton14->SetDefault();
    itemBoxSizer13->Add(itemButton14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

#endif

////@end TopDialog content construction
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON
 */

void TopDialog::OnButton4Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON in TopDialog.
    // Before editing this code, remove the block markers.
    BasicControls* window = new BasicControls(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON1
 */

void TopDialog::OnButton5Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON1 in TopDialog.
    // Before editing this code, remove the block markers.
    ComplexDialog* window = new ComplexDialog(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON1 in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON2
 */

void TopDialog::OnButton6Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON2 in TopDialog.
    // Before editing this code, remove the block markers.
    AdvancedControls* window = new AdvancedControls(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON2 in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON3
 */

void TopDialog::OnButton7Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON3 in TopDialog.
    // Before editing this code, remove the block markers.
    ScrollingDialog* window = new ScrollingDialog(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON3 in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON4
 */

void TopDialog::OnButton8Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON4 in TopDialog.
    // Before editing this code, remove the block markers.
    WizardDialog* window = new WizardDialog(this);
    window->Run();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON4 in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON5
 */

void TopDialog::OnButton9Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON5 in TopDialog.
    // Before editing this code, remove the block markers.
    SettingsDialog* window = new SettingsDialog(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON5 in TopDialog. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON6
 */

void TopDialog::OnButton10Click( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON6 in TopDialog.
    // Before editing this code, remove the block markers.
    SplitterDialog* window = new SplitterDialog(this);
    int returnValue = window->ShowModal();
    window->Destroy();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TOPDIALOG_BUTTON6 in TopDialog. 
}

#if defined(__WXMSW__) || defined(__WXGTK__)
/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL
 */

void TopDialog::OnCancelClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in TopDialog.
    // Before editing this code, remove the block markers.
    EndModal(wxID_CANCEL);
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in TopDialog. 
}
#endif

/*!
 * Should we show tooltips?
 */

bool TopDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap TopDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin TopDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end TopDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon TopDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin TopDialog icon retrieval
    wxUnusedVar(name);
    if (name == wxT("wxwin32x32.xpm"))
    {
        wxIcon icon(wxwin32x32_xpm);
        return icon;
    }
    return wxNullIcon;
////@end TopDialog icon retrieval
}
